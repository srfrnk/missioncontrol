{
  "apiVersion": "v1",
  "items": [
    {
      "apiVersion": "v1",
      "kind": "Namespace",
      "metadata": {
        "labels": {
          "ksonnet.io/component": "namespace",
          "name": "davnn"
        },
        "name": "davnn"
      }
    },
    {
      "apiVersion": "v1",
      "data": {
        "init.sh": "#!/bin/bash\nset -x\ncp /etc/kafka-configmap/log4j.properties /etc/kafka/\n\n# KAFKA_BROKER_ID=${HOSTNAME##*-}\n# SEDS=(\"s/#init#broker.id=#init#/broker.id=$KAFKA_BROKER_ID/\")\nSEDS=(\"\")\n# LABELS=\"kafka-broker-id=$KAFKA_BROKER_ID\"\nLABELS=\"\"\nANNOTATIONS=\"\"\n\n# hash kubectl 2\u003e/dev/null || {\n#   SEDS+=(\"s/#init#broker.rack=#init#/#init#broker.rack=# kubectl not found in path/\")\n# } \u0026\u0026 {\n  # ZONE=$(kubectl get node \"$NODE_NAME\" -o=go-template='{{index .metadata.labels \"failure-domain.beta.kubernetes.io/zone\"}}')\n  # if [ $? -ne 0 ]; then\n  #   SEDS+=(\"s/#init#broker.rack=#init#/#init#broker.rack=# zone lookup failed, see -c init-config logs/\")\n  # elif [ \"x$ZONE\" == \"x\u003cno value\u003e\" ]; then\n  #   SEDS+=(\"s/#init#broker.rack=#init#/#init#broker.rack=# zone label not found for node $NODE_NAME/\")\n  # else\n  #   SEDS+=(\"s/#init#broker.rack=#init#/broker.rack=$ZONE/\")\n  #   LABELS=\"$LABELS kafka-broker-rack=$ZONE\"\n  # fi\n\nOUTSIDE_HOST=localhost\nif [ $? -ne 0 ]; then\n  echo \"Outside (i.e. cluster-external access) host lookup command failed\"\nelse\n  OUTSIDE_PORT=9096\n  SEDS+=(\"s|#init#advertised.listeners=OUTSIDE://#init#|advertised.listeners=OUTSIDE://${OUTSIDE_HOST}:${OUTSIDE_PORT}|\")\n  ANNOTATIONS=\"$ANNOTATIONS kafka-listener-outside-host=$OUTSIDE_HOST kafka-listener-outside-port=$OUTSIDE_PORT\"\nfi\n\nif [ ! -z \"$LABELS\" ]; then\n  kubectl -n $POD_NAMESPACE label pod $POD_NAME $LABELS || echo \"Failed to label $POD_NAMESPACE.$POD_NAME - RBAC issue?\"\nfi\nif [ ! -z \"$ANNOTATIONS\" ]; then\n  kubectl -n $POD_NAMESPACE annotate pod $POD_NAME $ANNOTATIONS || echo \"Failed to annotate $POD_NAMESPACE.$POD_NAME - RBAC issue?\"\nfi\n# }\nprintf '%s\\n' \"${SEDS[@]}\" | sed -f - /etc/kafka-configmap/server.properties \u003e /etc/kafka/server.properties.tmp\n[ $? -eq 0 ] \u0026\u0026 mv /etc/kafka/server.properties.tmp /etc/kafka/server.properties\n",
        "log4j.properties": "# Unspecified loggers and loggers with additivity=true output to server.log and stdout\n# Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise\nlog4j.rootLogger=INFO, stdout\n\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log\nlog4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log\nlog4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log\nlog4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log\nlog4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log\nlog4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.appender.authorizerAppender=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.authorizerAppender.DatePattern='.'yyyy-MM-dd-HH\nlog4j.appender.authorizerAppender.File=${kafka.logs.dir}/kafka-authorizer.log\nlog4j.appender.authorizerAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.authorizerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n\n\n# Change the two lines below to adjust ZK client logging\nlog4j.logger.org.I0Itec.zkclient.ZkClient=INFO\nlog4j.logger.org.apache.zookeeper=INFO\n\n# Change the two lines below to adjust the general broker logging level (output to server.log and stdout)\nlog4j.logger.kafka=INFO\nlog4j.logger.org.apache.kafka=INFO\n\n# Change to DEBUG or TRACE to enable request logging\nlog4j.logger.kafka.request.logger=WARN, requestAppender\nlog4j.additivity.kafka.request.logger=false\n\n# Uncomment the lines below and change log4j.logger.kafka.network.RequestChannel$ to TRACE for additional output\n# related to the handling of requests\n#log4j.logger.kafka.network.Processor=TRACE, requestAppender\n#log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender\n#log4j.additivity.kafka.server.KafkaApis=false\nlog4j.logger.kafka.network.RequestChannel$=WARN, requestAppender\nlog4j.additivity.kafka.network.RequestChannel$=false\n\nlog4j.logger.kafka.controller=TRACE, controllerAppender\nlog4j.additivity.kafka.controller=false\n\nlog4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender\nlog4j.additivity.kafka.log.LogCleaner=false\n\nlog4j.logger.state.change.logger=TRACE, stateChangeAppender\nlog4j.additivity.state.change.logger=false\n\n# Change to DEBUG to enable audit log for the authorizer\nlog4j.logger.kafka.authorizer.logger=WARN, authorizerAppender\nlog4j.additivity.kafka.authorizer.logger=false\n",
        "server.properties": "############################# Log Basics #############################\n\n# A comma seperated list of directories under which to store log files\n# Overrides log.dir\nlog.dirs=/var/lib/kafka/data/topics\n\n# The default number of log partitions per topic. More partitions allow greater\n# parallelism for consumption, but this will also result in more files across\n# the brokers.\nnum.partitions=1\n\ndefault.replication.factor=1\n\nmin.insync.replicas=1\n\nauto.create.topics.enable=true\n\n# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.\n# This value is recommended to be increased for installations with data dirs located in RAID array.\n#num.recovery.threads.per.data.dir=1\n\n############################# Server Basics #############################\n\n# The id of the broker. This must be set to a unique integer for each broker.\n#init#broker.id=#init#\n\n#init#broker.rack=#init#\n\n############################# Socket Server Settings #############################\n\n# The address the socket server listens on. It will get the value returned from\n# java.net.InetAddress.getCanonicalHostName() if not configured.\n#   FORMAT:\n#     listeners = listener_name://host_name:port\n#   EXAMPLE:\n#     listeners = PLAINTEXT://your.host.name:9092\n#listeners=PLAINTEXT://:9092\nlisteners=OUTSIDE://:9096,PLAINTEXT://:9092\n\n# Hostname and port the broker will advertise to producers and consumers. If not set,\n# it uses the value for \"listeners\" if configured.  Otherwise, it will use the value\n# returned from java.net.InetAddress.getCanonicalHostName().\n#advertised.listeners=PLAINTEXT://your.host.name:9092\n#init#advertised.listeners=OUTSIDE://#init#,PLAINTEXT://localhost:9092\n\n# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details\n#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL\nlistener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,OUTSIDE:PLAINTEXT\ninter.broker.listener.name=PLAINTEXT\n\n# The number of threads that the server uses for receiving requests from the network and sending responses to the network\n#num.network.threads=3\n\n# The number of threads that the server uses for processing requests, which may include disk I/O\n#num.io.threads=8\n\n# The send buffer (SO_SNDBUF) used by the socket server\n#socket.send.buffer.bytes=102400\n\n# The receive buffer (SO_RCVBUF) used by the socket server\n#socket.receive.buffer.bytes=102400\n\n# The maximum size of a request that the socket server will accept (protection against OOM)\n#socket.request.max.bytes=104857600\n\n############################# Internal Topic Settings  #############################\n# The replication factor for the group metadata internal topics \"__consumer_offsets\" and \"__transaction_state\"\n# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.\n#offsets.topic.replication.factor=1\n#transaction.state.log.replication.factor=1\n#transaction.state.log.min.isr=1\n\n############################# Log Flush Policy #############################\n\n# Messages are immediately written to the filesystem but by default we only fsync() to sync\n# the OS cache lazily. The following configurations control the flush of data to disk.\n# There are a few important trade-offs here:\n#    1. Durability: Unflushed data may be lost if you are not using replication.\n#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.\n#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.\n# The settings below allow one to configure the flush policy to flush data after a period of time or\n# every N messages (or both). This can be done globally and overridden on a per-topic basis.\n\n# The number of messages to accept before forcing a flush of data to disk\n#log.flush.interval.messages=10000\n\n# The maximum amount of time a message can sit in a log before we force a flush\n#log.flush.interval.ms=1000\n\n############################# Log Retention Policy #############################\n\n# The following configurations control the disposal of log segments. The policy can\n# be set to delete segments after a period of time, or after a given size has accumulated.\n# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens\n# from the end of the log.\n\n# https://cwiki.apache.org/confluence/display/KAFKA/KIP-186%3A+Increase+offsets+retention+default+to+7+days\noffsets.retention.minutes=10080\n\n# The minimum age of a log file to be eligible for deletion due to age\nlog.retention.hours=-1\n\n# A size-based retention policy for logs. Segments are pruned from the log unless the remaining\n# segments drop below log.retention.bytes. Functions independently of log.retention.hours.\n#log.retention.bytes=1073741824\n\n# The maximum size of a log segment file. When this size is reached a new log segment will be created.\n#log.segment.bytes=1073741824\n\n# The interval at which log segments are checked to see if they can be deleted according\n# to the retention policies\n#log.retention.check.interval.ms=300000\n\n############################# Zookeeper #############################\n\n# Zookeeper connection string (see zookeeper docs for details).\n# This is a comma separated host:port pairs, each corresponding to a zk\n# server. e.g. \"127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002\".\n# You can also append an optional chroot string to the urls to specify the\n# root directory for all kafka znodes.\nzookeeper.connect=zookeeper.davnn-zookeeper.svc.cluster.local:2181\n\n# Timeout in ms for connecting to zookeeper\n#zookeeper.connection.timeout.ms=6000\n\n\n############################# Group Coordinator Settings #############################\n\n# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.\n# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.\n# The default value for this is 3 seconds.\n# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.\n# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.\n#group.initial.rebalance.delay.ms=0\n"
      },
      "kind": "ConfigMap",
      "metadata": {
        "labels": {
          "ksonnet.io/component": "kafka-configmap"
        },
        "name": "kafka-configmap",
        "namespace": "davnn"
      }
    },
    {
      "apiVersion": "v1",
      "data": {
        "app.template": "# environment variables\n# WEB_REVERSE_PROXY_PORT ${WEB_REVERSE_PROXY_PORT}\nserver {\n    listen 80 default_server;\n\n    location / {\n        proxy_pass http://localhost:${WEB_REVERSE_PROXY_PORT};\n    }\n\n    location /.well-known/acme-challenge/ {\n        root /var/www/letsencrypt/;\n        log_not_found off;\n    }\n}"
      },
      "kind": "ConfigMap",
      "metadata": {
        "labels": {
          "ksonnet.io/component": "nginx-configmap"
        },
        "name": "nginx-configmap",
        "namespace": "davnn"
      }
    },
    {
      "apiVersion": "storage.k8s.io/v1",
      "kind": "StorageClass",
      "metadata": {
        "labels": {
          "ksonnet.io/component": "cassandra-storage"
        },
        "name": "cassandra-storage",
        "namespace": "davnn"
      },
      "parameters": null,
      "provisioner": "k8s.io/minikube-hostpath",
      "reclaimPolicy": "Retain"
    },
    {
      "apiVersion": "storage.k8s.io/v1",
      "kind": "StorageClass",
      "metadata": {
        "labels": {
          "ksonnet.io/component": "kafka-storage"
        },
        "name": "kafka-storage",
        "namespace": "davnn"
      },
      "parameters": null,
      "provisioner": "k8s.io/minikube-hostpath",
      "reclaimPolicy": "Retain"
    },
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "labels": {
          "ksonnet.io/component": "service"
        },
        "name": "davnn",
        "namespace": "davnn"
      },
      "spec": {
        "clusterIP": "None",
        "ports": [
          {
            "name": "api",
            "port": 80
          },
          {
            "name": "9092",
            "port": 9092
          }
        ],
        "selector": {
          "app": "davnn"
        }
      }
    },
    {
      "apiVersion": "apps/v1",
      "kind": "StatefulSet",
      "metadata": {
        "labels": {
          "ksonnet.io/component": "deployment"
        },
        "name": "davnn",
        "namespace": "davnn"
      },
      "spec": {
        "replicas": 1,
        "selector": {
          "matchLabels": {
            "app": "davnn"
          }
        },
        "serviceName": "davnn",
        "template": {
          "metadata": {
            "annotations": null,
            "labels": {
              "app": "davnn",
              "version": "20191209-1612"
            }
          },
          "spec": {
            "containers": [
              {
                "args": [
                  "-c",
                  "envsubst \u003c /etc/nginx/templates/app.template \u003e /etc/nginx/conf.d/default.conf \u0026\u0026 exec nginx -g 'daemon off;'"
                ],
                "command": [
                  "/bin/bash"
                ],
                "env": [
                  {
                    "name": "WEB_REVERSE_PROXY_PORT",
                    "value": "3005"
                  },
                  {
                    "name": "NGINX_PORT",
                    "value": "80"
                  }
                ],
                "image": "docker.pkg.github.com/davfoundation/missioncontrol/nginx:20191209-1612",
                "name": "nginx",
                "ports": [
                  {
                    "containerPort": 80
                  }
                ],
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "1Gi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                },
                "volumeMounts": [
                  {
                    "mountPath": "/etc/nginx/templates",
                    "name": "nginx-configmap"
                  }
                ]
              },
              {
                "args": [
                  "-c",
                  "nodemon --watch 'src/**/*.ts' --ignore 'src/**/*.spec.ts' --exec 'ts-node' src/index.ts --inspect 9229"
                ],
                "command": [
                  "/bin/bash"
                ],
                "env": [
                  {
                    "name": "CASSANDRA_KEYSPACE",
                    "value": "davnn"
                  },
                  {
                    "name": "CASSANDRA_ENDPOINTS",
                    "value": "localhost"
                  },
                  {
                    "name": "KAFKA_HOST",
                    "value": "localhost:9092"
                  },
                  {
                    "name": "SDK_DEBUG_LOG",
                    "value": "true"
                  }
                ],
                "image": "docker.pkg.github.com/davfoundation/missioncontrol/api:20191209-1612",
                "name": "api",
                "ports": [
                  {
                    "containerPort": 3005
                  },
                  {
                    "containerPort": 9229
                  }
                ],
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "1Gi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              },
              {
                "command": [
                  "./bin/kafka-server-start.sh",
                  "/etc/kafka/server.properties"
                ],
                "env": [
                  {
                    "name": "KAFKA_LOG4J_OPTS",
                    "value": "-Dlog4j.configuration=file:/etc/kafka/log4j.properties"
                  },
                  {
                    "name": "JMX_PORT",
                    "value": "5555"
                  }
                ],
                "image": "docker.pkg.github.com/davfoundation/missioncontrol/kafka:20191209-1612",
                "name": "kafka",
                "ports": [
                  {
                    "containerPort": 9092,
                    "name": "inside"
                  },
                  {
                    "containerPort": 9094,
                    "name": "outside"
                  },
                  {
                    "containerPort": 5555,
                    "name": "jmx"
                  }
                ],
                "readinessProbe": {
                  "tcpSocket": {
                    "port": 9092
                  },
                  "timeoutSeconds": 1
                },
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "1Gi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                },
                "volumeMounts": [
                  {
                    "mountPath": "/etc/kafka",
                    "name": "kafka-config"
                  },
                  {
                    "mountPath": "/var/lib/kafka/data",
                    "name": "kafka-data"
                  }
                ]
              },
              {
                "env": [
                  {
                    "name": "MAX_HEAP_SIZE",
                    "value": "512M"
                  },
                  {
                    "name": "HEAP_NEWSIZE",
                    "value": "100M"
                  },
                  {
                    "name": "CASSANDRA_CLUSTER_NAME",
                    "value": "ride-hailing"
                  },
                  {
                    "name": "CASSANDRA_DC",
                    "value": "DC1"
                  },
                  {
                    "name": "CASSANDRA_RACK",
                    "value": "Rack1"
                  },
                  {
                    "name": "POD_IP",
                    "valueFrom": {
                      "fieldRef": {
                        "fieldPath": "status.podIP"
                      }
                    }
                  }
                ],
                "image": "docker.pkg.github.com/davfoundation/missioncontrol/cassandra:20191209-1612",
                "lifecycle": {
                  "preStop": {
                    "exec": {
                      "command": [
                        "/bin/sh",
                        "-c",
                        "nodetool drain"
                      ]
                    }
                  }
                },
                "name": "cassandra",
                "ports": [
                  {
                    "containerPort": 7000,
                    "name": "intra-node"
                  },
                  {
                    "containerPort": 7001,
                    "name": "tls-intra-node"
                  },
                  {
                    "containerPort": 7199,
                    "name": "jmx"
                  },
                  {
                    "containerPort": 9042,
                    "name": "cql"
                  }
                ],
                "readinessProbe": {
                  "exec": {
                    "command": [
                      "/bin/bash",
                      "-c",
                      "/ready-probe.sh"
                    ]
                  },
                  "initialDelaySeconds": 15,
                  "timeoutSeconds": 5
                },
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "1Gi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "512Mi"
                  }
                },
                "securityContext": {
                  "capabilities": {
                    "add": [
                      "IPC_LOCK"
                    ]
                  }
                },
                "volumeMounts": [
                  {
                    "mountPath": "/cassandra_data",
                    "name": "cassandra-data"
                  }
                ]
              }
            ],
            "initContainers": [
              {
                "command": [
                  "/bin/bash",
                  "/etc/kafka-configmap/init.sh"
                ],
                "env": [
                  {
                    "name": "NODE_NAME",
                    "valueFrom": {
                      "fieldRef": {
                        "fieldPath": "spec.nodeName"
                      }
                    }
                  },
                  {
                    "name": "POD_NAME",
                    "valueFrom": {
                      "fieldRef": {
                        "fieldPath": "metadata.name"
                      }
                    }
                  },
                  {
                    "name": "POD_NAMESPACE",
                    "valueFrom": {
                      "fieldRef": {
                        "fieldPath": "metadata.namespace"
                      }
                    }
                  }
                ],
                "image": "docker.pkg.github.com/davfoundation/missioncontrol/kafka-init:20191209-1612",
                "name": "davnn-init-config",
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "1Gi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                },
                "volumeMounts": [
                  {
                    "mountPath": "/etc/kafka-configmap",
                    "name": "kafka-configmap"
                  },
                  {
                    "mountPath": "/etc/kafka",
                    "name": "kafka-config"
                  }
                ]
              }
            ],
            "terminationGracePeriodSeconds": 30,
            "volumes": [
              {
                "configMap": {
                  "name": "nginx-configmap"
                },
                "name": "nginx-configmap"
              },
              {
                "configMap": {
                  "name": "kafka-configmap"
                },
                "name": "kafka-configmap"
              },
              {
                "emptyDir": {},
                "name": "kafka-config"
              }
            ]
          }
        },
        "volumeClaimTemplates": [
          {
            "metadata": {
              "name": "cassandra-data"
            },
            "spec": {
              "accessModes": [
                "ReadWriteOnce"
              ],
              "resources": {
                "requests": {
                  "storage": "0.5Gi"
                }
              },
              "storageClassName": "cassandra-storage"
            }
          },
          {
            "metadata": {
              "name": "kafka-data"
            },
            "spec": {
              "accessModes": [
                "ReadWriteOnce"
              ],
              "resources": {
                "requests": {
                  "storage": "0.5Gi"
                }
              },
              "storageClassName": "kafka-storage"
            }
          }
        ]
      }
    }
  ],
  "kind": "List"
}
